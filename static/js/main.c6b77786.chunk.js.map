{"version":3,"sources":["components/Snake.js","components/Food.js","components/Modal.js","components/SnakeGame.js","useInterval.js","App.js","reportWebVitals.js","index.js"],"names":["Snake","snakes","map","dot","i","dotStyle","left","top","className","style","Food","foodStyle","Modal","children","onClose","display","role","class","onClick","getRandomCordinates","Math","floor","random","SnakeGame","onAbort","initialFoodDot","useState","snakeDots","setSnakeDots","foodDot","setFoodDot","direction","setDirection","speed","setSpeed","score","setScore","showModal","setShowModal","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","moveSnake","checkIfOutOfBorders","checkIfCollapsed","checkFoodEat","onKeyDown","e","window","event","keyCode","document","addEventListener","removeEventListener","dots","head","length","push","shift","onGameOver","snake","pop","forEach","food","enlargeSnake","increaseSpeed","newSnake","unshift","App","gameMode","setGameMode","type","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c6b77786.chunk.js","sourcesContent":["import React from 'react'\n\nconst Snake = ({snakes}) => {\n    return (\n        <div>\n            {snakes.map((dot,i) => {\n                const dotStyle = {\n                    left: `${dot[0]}%`,\n                    top: `${dot[1]}%`\n                }\n                return (\n                    <div className=\"snake-dot\" key={i} style={dotStyle}></div>\n                )\n            })}\n        </div>\n    )\n}\n\nexport default Snake;\n","import React from 'react'\n\nconst Food = ({dot}) => {\n    const foodStyle = {\n        left: `${dot[0]}%`,\n        top: `${dot[1]}%`\n    }\n    return (\n        <div className=\"food-dot\" style={foodStyle}>            \n        </div>\n    )\n}\n\nexport default Food;\n","import React from 'react'\n\nconst Modal = ({children, onClose}) => {\n    return (\n      <div \n        className=\"modal show\"\n        style={{display: 'block'}}\n      >\n        <div className=\"modal-dialog modal-dialog-centered modal-dialog-scrollable\" role=\"document\">\n          <div className=\"modal-content game-modal\">\n            <div class=\"modal-body game-modal-overlay\">\n              <p className=\"modal-font\">Game Over</p>\n            </div>\n            <div className=\"footer-modal\">\n              <button \n                className=\"btn btn-success back-button\" \n                onClick={onClose}\n              >Back To Home</button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\nexport default Modal;\n","/* eslint-disable react-hooks/exhaustive-deps */\n/* eslint-disable default-case */\nimport './../index.css';\nimport Snake from './Snake';\nimport Food from './Food';\nimport Modal from './Modal'\nimport { useEffect, useState } from 'react';\nimport { useInterval } from \"./../useInterval\";\n\nconst getRandomCordinates = () => {\n    let min = 1;\n    let max = 99;\n    let x = Math.floor((Math.random()*(max-min+1)+min)/2)*2;\n    let y = Math.floor((Math.random()*(max-min+1)+min)/2)*2;\n    return [x, y];\n}\n\nconst SnakeGame = ({ onAbort }) => {\n    const initialSnakeDots = [[6,12],[8,12],[10,12]];\n    const initialFoodDot = getRandomCordinates();\n\n    const [snakeDots, setSnakeDots] = useState(initialSnakeDots);\n    const [foodDot, setFoodDot] = useState(initialFoodDot);\n    const [direction, setDirection] = useState('RIGHT');\n    const [speed, setSpeed] = useState(200);\n    const [score, setScore] = useState(0)\n    const [showModal, setShowModal] = useState(false);\n\n    useInterval(() => moveSnake(), speed);\n\n    useEffect(() => {\n        checkIfOutOfBorders();\n        checkIfCollapsed();\n        checkFoodEat();\n    }, [snakeDots])\n\n    useEffect(() => {\n        const onKeyDown = (e) => {\n            e = e || window.event;\n            switch (e.keyCode) {\n                case 38:\n                    setDirection('UP');\n                    break;\n                case 40:\n                    setDirection('DOWN');\n                    break;\n                case 37:\n                    setDirection('LEFT');\n                    break;\n                case 39:\n                    setDirection('RIGHT');\n                    break;\n            }\n        }\n        document.addEventListener('keydown', onKeyDown);\n        return () => {\n            document.removeEventListener('keydown', onKeyDown);\n        }\n    }, [])\n\n    const moveSnake = () => {\n        let dots = [...snakeDots];\n        let head = dots[dots.length - 1];\n    \n        switch (direction) {\n          case 'RIGHT':\n            head = [head[0] + 2, head[1]];\n            break;\n          case 'LEFT':\n            head = [head[0] - 2, head[1]];\n            break;\n          case 'DOWN':\n            head = [head[0], head[1] + 2];\n            break;\n          case 'UP':\n            head = [head[0], head[1] - 2];\n            break;\n        }\n\n        dots.push(head);\n        dots.shift();\n        setSnakeDots(dots);\n    }\n\n    const checkIfOutOfBorders = () => {\n        let head = snakeDots[snakeDots.length - 1];\n        if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0) {\n          onGameOver();\n        }\n      }\n\n    const checkIfCollapsed = () => {\n        let snake = [...snakeDots];\n        let head = snake[snake.length - 1];\n        snake.pop();\n        snake.forEach((dot) => {\n            if(head[0] === dot[0] && head[1] === dot[1]){\n                onGameOver();\n            }\n        })\n    }\n\n    const checkFoodEat = () => {\n        let head = snakeDots[snakeDots.length - 1];\n        let food = foodDot;\n        if(head[0] === food[0] && head[1] === food[1]){\n            setScore(score + 1);\n            setFoodDot(getRandomCordinates);\n            enlargeSnake();\n            increaseSpeed()\n        }\n    }\n\n    const enlargeSnake = () => {\n        let newSnake = [...snakeDots];\n        newSnake.unshift([]);\n        setSnakeDots(newSnake);\n    }\n\n    const increaseSpeed = () => {\n        if (speed > 10) {\n          setSpeed(speed - 10)\n        }\n      }\n\n    const onGameOver = () => {\n        setShowModal(true);\n    }\n\n    return (\n        <div>\n            {showModal ?\n                <Modal onClose={onAbort} /> :\n                <div>\n                    <div className=\"game-area\">\n                        <Snake snakes={snakeDots} />\n                        <Food dot={foodDot} />\n                    </div>\n                    <div className=\"score-card\">\n                        <p>Your Score</p>\n                        <p>{score}</p>\n                    </div>\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default SnakeGame\n","import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}","import React from 'react'\nimport './index.css';\nimport { useState } from 'react';\n\nimport SnakeGame from './components/SnakeGame';\n\nconst App = () => {\n  const [gameMode, setGameMode] = useState(false);\n  return (\n    <div className=\"bg\">\n      {gameMode ? <SnakeGame onAbort={() => setGameMode(false)} /> : <div className=\"form-container\">\n        <p className=\"header-font\">The Snake Game</p>\n        <div className=\"game-rules\">\n          <p className=\"rule-text\">1. Use your cursor keys: up, left, right, and down.</p>\n          <p className=\"rule-text\">2. Don't run the snake into the wall, or his own tail: you die.</p>\n          <p className=\"rule-text\">3. Eat the colored fruit to gain points.</p>\n          <p className=\"rule-text\">4. Your will get each point for each fruit taken</p>\n          <p className=\"rule-text\">5. Your score will be shown on the top right of your screen</p>\n        </div>\n        <button type=\"button\" className=\"btn btn-success start-button\" onClick={() => setGameMode(true)}>Start Game</button>\n      </div>}\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}