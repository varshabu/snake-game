{"version":3,"sources":["components/Snake.js","components/Food.js","components/SnakeGame.js","useInterval.js","App.js","reportWebVitals.js","index.js"],"names":["Snake","snakes","map","dot","i","dotStyle","left","top","className","style","Food","foodStyle","getRandomCordinates","Math","floor","random","SnakeGame","initialSnakeDots","initialFoodDot","useState","snakeDots","setSnakeDots","foodDot","setFoodDot","direction","setDirection","speed","setSpeed","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","moveSnake","checkIfOutOfBorders","checkIfCollapsed","checkFoodEat","onKeyDown","e","window","event","keyCode","document","addEventListener","removeEventListener","dots","head","length","push","shift","onGameOver","snake","pop","forEach","food","enlargeSnake","increaseSpeed","newSnake","unshift","alert","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7b5c5860.chunk.js","sourcesContent":["import React from 'react'\nimport './../index.css'\n\nconst Snake = ({snakes}) => {\n    return (\n        <div>\n            {snakes.map((dot,i) => {\n                const dotStyle = {\n                    left: `${dot[0]}%`,\n                    top: `${dot[1]}%`\n                }\n                return (\n                    <div className=\"snake-dot\" key={i} style={dotStyle}></div>\n                )\n            })}\n        </div>\n    )\n}\n\nexport default Snake;\n","import React from 'react'\n\nconst Food = ({dot}) => {\n    const foodStyle = {\n        left: `${dot[0]}%`,\n        top: `${dot[1]}%`\n    }\n    return (\n        <div className=\"food-dot\" style={foodStyle}>            \n        </div>\n    )\n}\n\nexport default Food;\n","/* eslint-disable react-hooks/exhaustive-deps */\n/* eslint-disable default-case */\nimport './../index.css';\nimport Snake from './Snake';\nimport Food from './Food';\nimport { useEffect, useState } from 'react';\nimport { useInterval } from \"./../useInterval\";\n\nconst getRandomCordinates = () => {\n    let min = 1;\n    let max = 99;\n    let x = Math.floor((Math.random()*(max-min+1)+min)/2)*2;\n    let y = Math.floor((Math.random()*(max-min+1)+min)/2)*2;\n    return [x, y];\n}\n\nconst SnakeGame = () => {\n    const initialSnakeDots = [[0,0],[2,0]];\n    const initialFoodDot = getRandomCordinates();\n\n    const [snakeDots, setSnakeDots] = useState(initialSnakeDots);\n    const [foodDot, setFoodDot] = useState(initialFoodDot);\n    const [direction, setDirection] = useState('RIGHT');\n    const [speed, setSpeed] = useState(200);\n\n    useInterval(() => moveSnake(), speed);\n\n    useEffect(() => {\n        checkIfOutOfBorders();\n        checkIfCollapsed();\n        checkFoodEat();\n    }, [snakeDots])\n\n    useEffect(() => {\n        const onKeyDown = (e) => {\n            e = e || window.event;\n            switch (e.keyCode) {\n                case 38:\n                    setDirection('UP');\n                    break;\n                case 40:\n                    setDirection('DOWN');\n                    break;\n                case 37:\n                    setDirection('LEFT');\n                    break;\n                case 39:\n                    setDirection('RIGHT');\n                    break;\n            }\n        }\n        document.addEventListener('keydown', onKeyDown);\n        return () => {\n            document.removeEventListener('keydown', onKeyDown);\n        }\n    }, [])\n\n    const moveSnake = () => {\n        let dots = [...snakeDots];\n        let head = dots[dots.length - 1];\n    \n        switch (direction) {\n          case 'RIGHT':\n            head = [head[0] + 2, head[1]];\n            break;\n          case 'LEFT':\n            head = [head[0] - 2, head[1]];\n            break;\n          case 'DOWN':\n            head = [head[0], head[1] + 2];\n            break;\n          case 'UP':\n            head = [head[0], head[1] - 2];\n            break;\n        }\n\n        dots.push(head);\n        dots.shift();\n        setSnakeDots(dots);\n    }\n\n    const checkIfOutOfBorders = () => {\n        let head = snakeDots[snakeDots.length - 1];\n        if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0) {\n          onGameOver();\n        }\n      }\n\n    const checkIfCollapsed = () => {\n        let snake = [...snakeDots];\n        let head = snake[snake.length - 1];\n        snake.pop();\n        snake.forEach((dot) => {\n            if(head[0] === dot[0] && head[1] === dot[1]){\n                onGameOver();\n            }\n        })\n    }\n\n    const checkFoodEat = () => {\n        let head = snakeDots[snakeDots.length - 1];\n        let food = foodDot;\n        if(head[0] === food[0] && head[1] === food[1]){\n            setFoodDot(getRandomCordinates);\n            enlargeSnake();\n            increaseSpeed()\n        }\n    }\n\n    const enlargeSnake = () => {\n        let newSnake = [...snakeDots];\n        newSnake.unshift([]);\n        setSnakeDots(newSnake);\n    }\n\n    const increaseSpeed = () => {\n        if (speed > 10) {\n          setSpeed(speed - 10)\n        }\n      }\n\n    const onGameOver = () => {\n        alert(\"Crossed boundary\");\n        setSnakeDots(initialSnakeDots);\n        setFoodDot(initialFoodDot);\n        setSpeed(200);\n        setDirection('RIGHT');\n    }\n\n    return (\n        <div className=\"game-area\">\n            <Snake snakes={snakeDots} />\n            <Food dot={foodDot} />\n        </div>\n    )\n}\n\nexport default SnakeGame\n","import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}","import React from 'react'\nimport './index.css';\n\nimport SnakeGame from './components/SnakeGame';\n\nconst App = () => {\n  return (\n    <div>\n      <SnakeGame />\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}